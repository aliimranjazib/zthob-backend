name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to server
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no root@69.62.126.95 '
          cd /home/zthob-backend
          sudo mkdir -p /var/backups/zthob
          sudo chown $USER:$USER /var/backups/zthob
          
          if [ -f "db.sqlite3" ]; then
            echo "Creating database backup..."
            cp db.sqlite3 /var/backups/zthob/db_backup_$(date +%Y%m%d_%H%M%S).sqlite3
          fi
          
          echo "Creating code backup..."
          tar -czf /var/backups/zthob/code_backup_$(date +%Y%m%d_%H%M%S).tar.gz --exclude=".git" --exclude="__pycache__" --exclude="*.pyc" .
          
          echo "Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          echo "Activating virtual environment..."
          source magsk_venv/bin/activate
          
          echo "Installing dependencies..."
          pip3 install -r requirements.txt
          
          echo "Running migrations..."
          python3 manage.py migrate --verbosity=2 || {
            echo "Migration failed, attempting to fix..."
            python3 fix_migrations.py || {
              echo "Fix failed, resetting database..."
              python3 reset_database.py
            }
          }
          
          echo "Checking migration status..."
          python3 manage.py showmigrations
          
          echo "Verifying database tables..."
          python3 -c "import sqlite3; conn = sqlite3.connect('db.sqlite3'); cursor = conn.cursor(); cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\"); tables = [row[0] for row in cursor.fetchall()]; print('All tables found:', len(tables), 'tables'); required = ['tailors_fabrictype', 'tailors_fabriccategory', 'tailors_fabric', 'tailors_fabricimage', 'tailors_tailorprofile', 'orders_order', 'orders_orderitem']; missing = [t for t in required if t not in tables]; print('❌ Missing tables:', missing) if missing else print('✅ All required tables exist'); conn.close()"
          
          echo "Collecting static files..."
          python3 manage.py collectstatic --noinput
          
          echo "Restarting service..."
          # Ensure gunicorn directories exist
          sudo mkdir -p /var/run/gunicorn
          sudo chown root:root /var/run/gunicorn
          sudo chmod 755 /var/run/gunicorn
          sudo mkdir -p /home/zthob-backend/logs
          sudo chown root:root /home/zthob-backend/logs
          sudo chmod 755 /home/zthob-backend/logs
          
          sudo systemctl restart gunicorn
          
          # Wait a moment for service to start
          sleep 3
          
          if systemctl is-active --quiet gunicorn; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Service failed to start, checking logs..."
            systemctl status gunicorn
            journalctl -u gunicorn --since "1 minute ago"
            echo "Attempting to fix and restart..."
            
            # Fix common issues
            sudo mkdir -p /var/run/gunicorn
            sudo chown root:root /var/run/gunicorn
            sudo chmod 755 /var/run/gunicorn
            
            # Restart again
            sudo systemctl restart gunicorn
            sleep 3
            
            if systemctl is-active --quiet gunicorn; then
              echo "✅ Service fixed and running!"
            else
              echo "❌ Service still failed after fix attempt"
              exit 1
            fi
          fi
        '
