# Generated by Django 5.2.6 on 2025-10-15 17:50

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FabricCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=120, unique=True)),
                ('name', models.CharField(help_text='Name of the fabric category', max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Fabric Category',
                'verbose_name_plural': 'Fabric Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FabricTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=120, unique=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Fabric Tag',
                'verbose_name_plural': 'Fabric Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FabricType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=120, unique=True)),
                ('name', models.CharField(help_text='Name of the fabric type (e.g., Cotton, Silk, Wool)', max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Fabric Type',
                'verbose_name_plural': 'Fabric Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the service area (e.g., Riyadh, Jeddah, Dammam)', max_length=100, unique=True)),
                ('city', models.CharField(help_text='City this service area belongs to', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this service area is available for selection')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Service Area',
                'verbose_name_plural': 'Service Areas',
                'ordering': ['city', 'name'],
                'indexes': [models.Index(fields=['city', 'is_active'], name='tailors_ser_city_c868a5_idx'), models.Index(fields=['is_active'], name='tailors_ser_is_acti_4ac6ca_idx')],
            },
        ),
        migrations.CreateModel(
            name='TailorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop_name', models.CharField(blank=True, help_text="Name of the tailor's shop", max_length=100, null=True)),
                ('contact_number', models.CharField(blank=True, help_text='Primary contact number', max_length=20, null=True)),
                ('establishment_year', models.PositiveIntegerField(blank=True, help_text='Year the business was established', null=True)),
                ('tailor_experience', models.PositiveIntegerField(blank=True, help_text='Years of tailoring experience', null=True)),
                ('working_hours', models.JSONField(blank=True, default=dict, help_text="Working hours stored as JSON. Format: {'monday': {'is_open': true, 'start_time': '09:00', 'end_time': '18:00'}}", null=True)),
                ('address', models.TextField(blank=True, help_text='Business address', max_length=250, null=True)),
                ('shop_status', models.BooleanField(default=True, help_text='Whether the shop is currently open')),
                ('shop_image', models.ImageField(blank=True, help_text='Shop image (JPG, JPEG, PNG only)', null=True, upload_to='tailor_profiles/shop_images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tailor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tailor Profile',
                'verbose_name_plural': 'Tailor Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Fabric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the fabric', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the fabric', null=True)),
                ('sku', models.CharField(editable=False, help_text='Stock Keeping Unit - auto-generated', max_length=20, unique=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10)),
                ('stock', models.PositiveIntegerField(default=1, help_text='Available stock quantity')),
                ('seasons', models.CharField(choices=[('summer', 'Summer'), ('winter', 'Winter'), ('all_season', 'All Season')], default='all_season', help_text='Best suited season for this fabric', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this fabric is available for sale')),
                ('fabric_image', models.ImageField(blank=True, help_text='Legacy single image field - use gallery instead', null=True, upload_to='fabrics/images', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, help_text='Category of fabric', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fabrics', to='tailors.fabriccategory')),
                ('tags', models.ManyToManyField(blank=True, help_text='Tags associated with this fabric', related_name='fabrics', to='tailors.fabrictag')),
                ('fabric_type', models.ForeignKey(blank=True, help_text='Type of fabric', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fabrics', to='tailors.fabrictype')),
                ('tailor', models.ForeignKey(help_text='Tailor who owns this fabric', on_delete=django.db.models.deletion.CASCADE, related_name='fabrics', to='tailors.tailorprofile')),
            ],
            options={
                'verbose_name': 'Fabric',
                'verbose_name_plural': 'Fabrics',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TailorProfileReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', help_text='Review status of the tailor profile', max_length=20)),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When the profile was submitted for review', null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the profile was reviewed by admin', null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if applicable', null=True)),
                ('service_areas', models.JSONField(blank=True, default=list, help_text='List of cities/areas served by this tailor')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='tailors.tailorprofile')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Admin who reviewed this profile', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_tailor_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile Review',
                'verbose_name_plural': 'Profile Reviews',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='TailorServiceArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, help_text="Whether this is the tailor's primary service area")),
                ('delivery_fee', models.DecimalField(blank=True, decimal_places=2, help_text='Delivery fee for this area (optional)', max_digits=10, null=True)),
                ('estimated_delivery_days', models.PositiveIntegerField(blank=True, help_text='Estimated delivery time in days (optional)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service_area', models.ForeignKey(help_text='Service area being served', on_delete=django.db.models.deletion.CASCADE, related_name='tailors', to='tailors.servicearea')),
                ('tailor', models.ForeignKey(help_text='Tailor who serves this area', on_delete=django.db.models.deletion.CASCADE, related_name='service_areas', to='tailors.tailorprofile')),
            ],
            options={
                'verbose_name': 'Tailor Service Area',
                'verbose_name_plural': 'Tailor Service Areas',
                'ordering': ['-is_primary', 'service_area__city', 'service_area__name'],
            },
        ),
        migrations.CreateModel(
            name='FabricImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Image file', upload_to='fabrics/gallery', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('is_primary', models.BooleanField(default=False, help_text='Designates this image as the primary image')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order of the image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fabric', models.ForeignKey(help_text='Fabric this image belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='gallery', to='tailors.fabric')),
            ],
            options={
                'verbose_name': 'Fabric Image',
                'verbose_name_plural': 'Fabric Images',
                'ordering': ['-is_primary', 'order', 'id'],
                'constraints': [models.UniqueConstraint(condition=models.Q(('is_primary', True)), fields=('fabric',), name='unique_primary_image_per_fabric')],
                'unique_together': {('fabric', 'order')},
            },
        ),
        migrations.AddIndex(
            model_name='fabric',
            index=models.Index(fields=['tailor', 'is_active'], name='tailors_fab_tailor__d08b7b_idx'),
        ),
        migrations.AddIndex(
            model_name='fabric',
            index=models.Index(fields=['fabric_type', 'seasons'], name='tailors_fab_fabric__d3a95b_idx'),
        ),
        migrations.AddIndex(
            model_name='fabric',
            index=models.Index(fields=['category', 'is_active'], name='tailors_fab_categor_73b49f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tailorservicearea',
            unique_together={('tailor', 'service_area')},
        ),
    ]
